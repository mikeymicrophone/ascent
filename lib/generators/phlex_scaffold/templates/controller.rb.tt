class <%= controller_class_name %>Controller < ApplicationController
  before_action :set_<%= singular_table_name %>, only: %i[ show edit update destroy ]

  # GET <%= route_url %>
  def index
    <%= plural_table_name %> = <%= class_name %>.all
    render Views::<%= controller_class_name %>::IndexView.new(<%= plural_table_name %>: <%= plural_table_name %>, notice: notice)
  end

  # GET <%= route_url %>/1
  def show
    render Views::<%= controller_class_name %>::ShowView.new(<%= singular_table_name %>: @<%= singular_table_name %>, notice: notice)
  end

  # GET <%= route_url %>/new
  def new
    <%= singular_table_name %> = <%= class_name %>.new
    render Views::<%= controller_class_name %>::NewView.new(<%= singular_table_name %>: <%= singular_table_name %>)
  end

  # GET <%= route_url %>/1/edit
  def edit
    render Views::<%= controller_class_name %>::EditView.new(<%= singular_table_name %>: @<%= singular_table_name %>)
  end

  # POST <%= route_url %>
  def create
    <%= singular_table_name %> = <%= class_name %>.new(<%= "#{singular_table_name}_params" %>)

    if <%= singular_table_name %>.save
      redirect_to <%= singular_table_name %>, notice: <%= %("#{human_name} was successfully created.") %>
    else
      render Views::<%= controller_class_name %>::NewView.new(<%= singular_table_name %>: <%= singular_table_name %>), status: :unprocessable_entity
    end
  end

  # PATCH/PUT <%= route_url %>/1
  def update
    if @<%= singular_table_name %>.update(<%= "#{singular_table_name}_params" %>)
      redirect_to @<%= singular_table_name %>, notice: <%= %("#{human_name} was successfully updated.") %>, status: :see_other
    else
      render Views::<%= controller_class_name %>::EditView.new(<%= singular_table_name %>: @<%= singular_table_name %>), status: :unprocessable_entity
    end
  end

  # DELETE <%= route_url %>/1
  def destroy
    @<%= singular_table_name %>.destroy!
    redirect_to <%= index_helper %>_url, notice: <%= %("#{human_name} was successfully destroyed.") %>, status: :see_other
  end

  private

  # Use callbacks to share common setup or constraints between actions.
  def set_<%= singular_table_name %>
    @<%= singular_table_name %> = <%= class_name %>.find(params[:id])
  end

  # Only allow a list of trusted parameters through.
  def <%= "#{singular_table_name}_params" %>
    <%- if attributes_names.empty? -%>
    params.fetch(:<%= singular_table_name %>, {})
    <%- else -%>
    params.require(:<%= singular_table_name %>).permit(<%= attributes_names.map { |name| ":#{name}" }.join(', ') %>)
    <%- end -%>
  end
end