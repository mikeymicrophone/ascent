class Views::<%= controller_class_name %>::<%= class_name %>Form < Views::ApplicationView
  def initialize(<%= singular_table_name %>:)
    @<%= singular_table_name %> = <%= singular_table_name %>
  end

  def view_template(&)
    form_with(model: @<%= singular_table_name %>, id: dom_id(@<%= singular_table_name %>, :form)) do |form|
      render_errors if @<%= singular_table_name %>.errors.any?
      
<% form_attributes.each do |attribute| -%>
<% if attribute.password_digest? -%>
      div do
        form.label :password
        form.password_field :password, 
                            class: input_classes(@<%= singular_table_name %>.errors[:password])
      end

      div do
        form.label :password_confirmation
        form.password_field :password_confirmation,
                            class: input_classes(@<%= singular_table_name %>.errors[:password_confirmation])
      end
<% elsif attribute.attachments? -%>
      div do
        form.label :<%= attribute.column_name %>
        form.<%= attribute.field_type %> :<%= attribute.column_name %>,
                                        multiple: true,
                                        class: input_classes(@<%= singular_table_name %>.errors[:<%= attribute.column_name %>])
      end
<% else -%>
      div do
<% if attribute.reference? -%>
<% association_name = attribute.singular_name -%>
<% model_name = association_name.classify -%>
        form.label :<%= attribute.column_name %>, "<%= association_name.humanize %>"
        form.collection_select :<%= attribute.column_name %>, 
                               ::<%= model_name %>.all, 
                               :id, 
                               :name,
                               { prompt: "Select a <%= association_name.humanize.downcase %>" },
                               { class: input_classes(@<%= singular_table_name %>.errors[:<%= attribute.column_name %>]) }
<% else -%>
        form.label :<%= attribute.column_name %>
<% if attribute.field_type == :textarea || attribute.field_type == :text_area -%>
        form.<%= attribute.field_type %> :<%= attribute.column_name %>,
                                        rows: 4,
                                        class: input_classes(@<%= singular_table_name %>.errors[:<%= attribute.column_name %>])
<% elsif attribute.field_type == :checkbox || attribute.field_type == :check_box -%>
        form.<%= attribute.field_type %> :<%= attribute.column_name %>,
                                        class: checkbox_classes(@<%= singular_table_name %>.errors[:<%= attribute.column_name %>])
<% else -%>
        form.<%= attribute.field_type %> :<%= attribute.column_name %>,
                                        class: input_classes(@<%= singular_table_name %>.errors[:<%= attribute.column_name %>])
<% end -%>
<% end -%>
      end
<% end -%>

<% end -%>
      div do
        form.submit class: "primary"
      end
    end
  end

  private

  def render_errors
    div(id: "error_explanation") do
      h2 { "#{pluralize(@<%= singular_table_name %>.errors.count, 'error')} prohibited this <%= singular_table_name %> from being saved:" }
      
      ul(class: "list-disc ml-6") do
        @<%= singular_table_name %>.errors.each do |error|
          li { error.full_message }
        end
      end
    end
  end

  def input_classes(errors)
    errors.any? ? "error" : ""
  end

  def checkbox_classes(errors)
    errors.any? ? "error" : ""
  end
end